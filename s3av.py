#!/usr/bin/env python3
"""
Usage:
    s3av.py <s3_bucket_name> <file_key>
    s3av.py <s3_bucket_name> <file_key>
    s3av.py <s3_bucket_name> <file_key> [--aws_secret_access_key=<aws_secret_access_key>] [--aws_access_key_id=<aws_access_key_id>] [--aws_region=<aws_region>] 
    s3av.py --version
    s3av.py (-h | --help)

Options:
  -h --help     Show this screen.
  --version     Show version.
  --aws_secret_access_key=<aws_secret_access_key>  aws secret key
  --aws_access_key_id=<aws_access_key_id>     aws access id
  --aws_region=<aws_region>    aws region
"""
import os
import clamd
from io import BytesIO
import boto3
from docopt import docopt
import unittest

# Start clamd service
os.system('service clamav-daemon start')
cd = clamd.ClamdUnixSocket()
print('Using {}'.format(cd.version()))
pong = cd.ping()
print("Pong response : {}".format(pong))


def download_file_s3(bucket_name,file_key,aws_access_key_id=None,aws_secret_access_key=None,aws_region=None):

    if aws_access_key_id is not None and aws_secret_access_key is not None:
        SECRET_KEY = aws_secret_access_key
        ACCESS_KEY = aws_access_key_id
        AWS_REGION = aws_region

        S3 = boto3.client('s3', aws_access_key_id=str(ACCESS_KEY),
                  aws_secret_access_key=str(SECRET_KEY),
                  region_name=str(AWS_REGION))
        print("Connected to aws s3 with given access_key")   
    else:

        print("Using IAM/Stored default aws config")
        S3 = boto3.client('s3')
        print("Connected to aws s3 with default aws config")
    try:
        print("Downloading{}".format(file_key))
        S3.download_file(bucket_name, file_key,os.path.basename(file_key))
    except botocore.exceptions.ClientError as error:
        if error.response['Error']['Code'] == "404":
            raise FileNotFound("File {} not present in {} S3 Bucket!".format(file_key, bucket_name))
        raise Exception("Failed to download {} from {} due to {}".format(file_key,bucket_name,error))
    except Exception as oe:
        raise Exception("Failed to download {} from {} due to {}".format(file_key,bucket_name,oe))

        print('Downloaded {}'.format(file_key))


def scan_file(file_key):
    '''
    Scan a file with Clam AV
    '''
    file = os.path.basename(file_key)
    dir_path = os.path.dirname(os.path.realpath(file))
    file_path  = os.path.join(dir_path,file)
    # Scan given file
    results = cd.scan(file_path)
    return results[str(file_path)][0],results[str(file_path)][1]





def scan_s3_file(bucket_name,file_key,aws_access_key_id=None,aws_secret_access_key=None,aws_region=None):
    '''
    Scan a file with Clam AV
    '''
    # Download from s3
    download_file_s3(bucket_name,file_key,aws_access_key_id,aws_secret_access_key,aws_region)
    
    # Scan the downloaded file
    AV_STATUS , AV_SIGN = scan_file(file_key)

    return AV_STATUS , AV_SIGN




# def scan_stream(file_stream):
#     '''
#     Scan a file with Clam AV
#     '''

#     # open('/tmp/EICAR','wb').write(clamd.EICAR)
#     results = cd.instream(BytesIO(file_stream))

#     return results[str(file)][0],results[str(file)][1]


if __name__ == "__main__":
    params = docopt(__doc__,version='S3AV Pilot 1.0')
    bucket_name = params['<s3_bucket_name>']
    file_key = params['<file_key>']

    if params['--aws_secret_access_key'] is not None:
        aws_secret_access_key = params['--aws_secret_access_key']
    else:
        aws_secret_access_key = None

    if params['--aws_access_key_id'] is not None:
        aws_access_key_id = params['--aws_access_key_id']
    else:
        aws_access_key_id = None


    if params['--aws_region'] is not None:
        aws_region = params['--aws_region']
    else:
        aws_region = None

    # if params['--tag_s3'] is not None:
    #     tag_s3 = params['--tag_s3']
    # else:
    #     tag_s3 = None
    
    print("Starting to scan {}".format(file_key))
    AV_STATUS,AV_SIGN = scan_s3_file(bucket_name,file_key,aws_access_key_id,aws_secret_access_key,aws_region)
    print("Scan status of {} : {}".format(file_key,AV_STATUS))


