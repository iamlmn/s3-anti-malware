#!/usr/bin/env python3
"""
Usage:
    s3av.py <s3_bucket_name> <file_key>
    
Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Moored (anchored) mine.
  --drifting    Drifting mine.
"""
import os
import clamd
from io import BytesIO
from boto3.session import Session
import boto3
from docopt import docopt
os.system('service clamav-daemon start')
cd = clamd.ClamdUnixSocket()
pong = cd.ping()
print("Pong response : {}".format(pong))
print('Using {}'.format(cd.version()))


def download_file_s3(bucket_name,file_key,aws_access_key_id=None,aws_secret_access_key=None):

    if aws_access_key_id is not None and aws_secret_access_key is not None:
        ACCESS_KEY = aws_secret_access_key
        SECRET_KEY = aws_access_key_id

        # session = Session(aws_access_key_id=ACCESS_KEY,
        #           aws_secret_access_key=SECRET_KEY)
        # print("Connected to aws")




        # # session is authenticated and can access the resource in question 
        # print("Downloading{}".format(file_key))
        # try:
        #     session.resource('s3')
        #         .Bucket(bucket_name)
        #         .download_file(os.path.basename(file_key),file_key)
        # except Exception as e:
        #     raise Exception("Failed to download {} from {} due to {}".format(file_key,bucket_name,e))

    else:

        print("Using IAM/Stored default aws config")
        S3 = boto3.resource('s3')
        try:
            S3.Bucket(bucket_name).download_file(file_key, os.path.basename(file_key))
        except botocore.exceptions.ClientError as error:
            if error.response['Error']['Code'] == "404":
                raise FileNotFound("File {} not present in {} S3 Bucket!".format(file_key, bucket_name))
            raise Exception("Failed to download {} from {} due to {}".format(file_key,bucket_name,error))
        except Exception as oe:
            raise Exception("Failed to download {} from {} due to {}".format(file_key,bucket_name,oe))

        print('Downloaded {}'.format(file_key))


def scan_s3_file(bucket_name,file_key):
    '''
    Scan a file with Clam AV
    '''
    # Download from s3
    download_file_s3(bucket_name,file_key)
    file = os.path.basename(file_key)
    dir_path = os.path.dirname(os.path.realpath(file))
    file_path  = os.path.join(dir_path,file)
    # Scan given file
    results = cd.scan(file_path)
    print(results)
    AV_STATUS , AV_SIGN = results[str(file_path)][0],results[str(file_path)][1]

    return AV_STATUS , AV_SIGN




# def scan_stream(file_stream):
#     '''
#     Scan a file with Clam AV
#     '''

#     # open('/tmp/EICAR','wb').write(clamd.EICAR)
#     results = cd.instream(BytesIO(file_stream))

#     return results[str(file)][0],results[str(file)][1]


if __name__ == "__main__":
    params = docopt(__doc__)
    print(params)
    bucket_name = params['<s3_bucket_name>']
    file_key = params['<file_key>']

    '''if params['--aws_secret_access_key'] is not None:
        aws_secret_access_key = params['--aws_secret_access_key']
    else:
        aws_secret_access_key = None

    if params['--aws_access_key_id'] is not None:
        aws_access_key_id = params['--aws_access_key_id']
    else:
        aws_access_key_id = None

    if params['--tag_s3'] is not None:
        tag_s3 = params['--tag_s3']
    else:
        tag_s3 = None
    '''


    print("Starting to scan {}".format(file_key))
    AV_STATUS,AV_SIGN = scan_s3_file(bucket_name,file_key)
    print("Scan status of {} : {}".format(file_key,AV_STATUS))


